import '../domain/user_routes.dart';
import '../models/user.dart';

typedef Success = void Function(User session);
typedef Failure = void Function(String error);

abstract class LoginFacebookUseCaseProtocol {
  void execute({required String token, required Success success, required Failure failure});
}

class LoginFacebookUseCase extends LoginFacebookUseCaseProtocol {
  UserRoutesProtocol routes;

  LoginFacebookUseCase({required this.routes});

  @override
  void execute({required String token, required Success success, required Failure failure}) {
    routes.loginFacebook(
      token: token,
      success: (response) {
        try {
          final session = User.fromMap(response);
          success(session);
        } on Error catch (error) {
          failure.call(error.toString());
        }
      },
      failure: (error) {
        failure(error.toString());
      },
    );
  }
}
